@page "/dnd-structcomp"
@using DragAndDrop.Components
@using DragAndDrop.Components.Interfaces
@using DragAndDrop.Data

<h3>DragAndDropSampleUsingDataStructureComponents</h3>

<p>Don't touch that heading</p>

<h3>Non-draggable Item Sample</h3>
<DragAndDropItem Item="@("Non-draggable Item")" Name="DND Item 1">
  <NullItemTemplate>
    <div>
      <p>Item loading.  Please wait...</p>
    </div>
  </NullItemTemplate>
  <ItemTemplate>
    <p>@context</p>
  </ItemTemplate>
</DragAndDropItem>
<br />
<h3>Draggable Item Sample</h3>
<DraggableItem Item="@("Draggable Item")" DragEnabled="dragEnabled" Name="Draggable Item 1">
  <NullItemTemplate>
    <div>
      <p>Item loading.  Please wait...</p>
    </div>
  </NullItemTemplate>
  <ItemTemplate>
    <span class="oi oi-lock-@(dragEnabled ? "unlocked" : "locked")" style="cursor:pointer;" @onclick="ToggleDragEnabled"></span>
    <p>@context</p>
  </ItemTemplate>
</DraggableItem>
<br />
<h3>Drag and Drop Container Sample (Manual Items)</h3>
<DragAndDropContainer Name="Outer Group Container">
  <DragAndDropItem Item="@("Outer Group Item 1")" Name="Outer Group Item 1">
    <NullItemTemplate>
      <div>
        <p>Item loading.  Please wait...</p>
      </div>
    </NullItemTemplate>
    <ItemTemplate>
      <p>Print it out like this: @context</p>
    </ItemTemplate>
  </DragAndDropItem>
  <DraggableItem Item="@("Outer Group Item 2")" Name="Outer Group Item 2">
    <NullItemTemplate>
      <div>
        <p>Item loading.  Please wait...</p>
      </div>
    </NullItemTemplate>
    <ItemTemplate>
      <p>Print it out like this: @context</p>
    </ItemTemplate>
  </DraggableItem>
  <DraggableContainer Name="Inner Group Container">
    <DragAndDropItem Item="@("Inner Group Item 1")" Name="Inner Group Item 1">
      <NullItemTemplate>
        <div>
          <p>Item loading.  Please wait...</p>
        </div>
      </NullItemTemplate>
      <ItemTemplate>
        <p>Print it out like this: @context</p>
      </ItemTemplate>
    </DragAndDropItem>
    <DragAndDropItem Item="@("Inner Group Item 2")" Name="Inner Group Item 2">
      <NullItemTemplate>
        <div>
          <p>Item loading.  Please wait...</p>
        </div>
      </NullItemTemplate>
      <ItemTemplate>
        <p>Print it out like this: @context</p>
      </ItemTemplate>
    </DragAndDropItem>
  </DraggableContainer>
</DragAndDropContainer>

<br />
<h3>Drag and Drop Container Sample (Using a Variable That Holds a List of Items)</h3>
<p>
  This one uses draggable groups to surround 2 non-draggable elements.  The first element represent
  a search criteria.  The second represents the "AndWithNext" item that displays "And" or "Or" between
  two search criteria.
</p>
<DragAndDropContainer Name="Outer Group Container 2">
  @if (queryParams is null || queryParams.Count == 0) {
    <p>There are no query parameters</p>
  } else {
    var i = 0;

    foreach (var qParm in queryParams) {
      var curName = $"Query Param {i++}";
      var displayAndOr = i < queryParams.Count();
      <DraggableContainer Name="@curName" ShowTitle="false">
        @{ curName += "_Item"; }
        <DragAndDropItem Name="@curName" Item="qParm">
          <NullItemTemplate>
            <div>
              <p>Item loading.  Please wait...</p>
            </div>
          </NullItemTemplate>
          <ItemTemplate>
            <div style="cursor:move;">@context.ToString()</div>
          </ItemTemplate>
        </DragAndDropItem>
        @if (displayAndOr) {
          var curAndOr = qParm.AndWithNext ? "And" : "Or";
          curName += "_AndOr";
          <DragAndDropItem Name="@curName" Item="qParm">
            <ItemTemplate>
              <div style="cursor:pointer;"
                   @ondblclick="((e) => ToggleAndOr(e, context))"
                   @ondblclick:preventDefault="true"
                   @ondblclick:stopPropagation="true">
                &nbsp;&nbsp;@(context.AndWithNext ? "And" : "Or")
              </div>
            </ItemTemplate>
          </DragAndDropItem>
        }
      </DraggableContainer>
    }
  }
</DragAndDropContainer>
<br />
<h3>Drag and Drop Container Sample Alternate (Using a Variable That Holds a List of Items)</h3>
<p>
  This version uses a DraggableItem immediately followed by a non-draggable item (DragAndDropItem).
  The draggable item represents the search criteria and the non-draggable item represents the
  "AndWithNext" item that displays the "And" or "Or" between two search criteria.
</p>
<DragAndDropContainer Name="Outer Group Container 2">
  @if (queryParams is null || queryParams.Count == 0) {
    <p>There are no query parameters</p>
  } else {
    var i = 0;

    foreach (var qParm in queryParams) {
      var curName = $"Query Param {i++}";
      var displayAndOr = i < queryParams.Count();
      <DraggableItem Name="@curName" Item="qParm">
        <NullItemTemplate>
          <div>
            <p>Item loading.  Please wait...</p>
          </div>
        </NullItemTemplate>
        <ItemTemplate>
          <div style="cursor:move">@context.ToString()</div>
        </ItemTemplate>
      </DraggableItem>
      curName += "_AndOr";
      if (displayAndOr) {
        var curAndOr = qParm.AndWithNext ? "And" : "Or";
        <DragAndDropItem Name="@curName" Item="qParm">
          <ItemTemplate>
            <div style="cursor:pointer;"
                 @ondblclick="((e) => ToggleAndOr(e, context))"
                 @ondblclick:preventDefault="true"
                 @ondblclick:stopPropagation="true">
              &nbsp;&nbsp;@(context.AndWithNext ? "And" : "Or")
            </div>
          </ItemTemplate>
        </DragAndDropItem>
      }
    }
  }
</DragAndDropContainer>
<br />
<h3>Drag and Drop Container Sample Alternate 2 (Using a Variable That Holds a List of Items)</h3>
<p>
  This version uses a DraggableItem immediately followed by a DragAndDropElement.
  The draggable item represents the search criteria and the DragAndDropElement represents the
  "AndWithNext" item that displays the "And" or "Or" between two search criteria.
</p>
<DragAndDropContainer Name="Outer Group Container 2">
  @if (queryParams is null || queryParams.Count == 0) {
    <p>There are no query parameters</p>
  } else {
    var i = 0;

    foreach (var qParm in queryParams) {
      var curName = $"Query Param {i++}";
      var displayAndOr = i < queryParams.Count();
      <DraggableItem Name="@curName" Item="qParm">
        <NullItemTemplate>
          <div>
            <p>Item loading.  Please wait...</p>
          </div>
        </NullItemTemplate>
        <ItemTemplate>
          <div style="cursor:move">@context.ToString()</div>
        </ItemTemplate>
      </DraggableItem>
      curName += "_AndOr";
      if (displayAndOr) {
        var curAndOr = qParm.AndWithNext ? "And" : "Or";
        <DragAndDropElement Name="@curName">
          <div style="cursor:pointer;"
               @ondblclick="((e) => ToggleAndOr(e, qParm))"
               @ondblclick:preventDefault="true"
               @ondblclick:stopPropagation="true">
            &nbsp;&nbsp;@(qParm.AndWithNext ? "And" : "Or")
          </div>
        </DragAndDropElement>
      }
    }
  }
</DragAndDropContainer>

<br />
<h3>Using DataStructure</h3>
<div></div>
<div style="margin-top: 200px;"></div>

@code {
  bool dragEnabled = true;

  QueryParameter queryParam = new QueryParameter() {
    Field = "DocTitle",
    Operator = "Equals",
    Values = new List<object>() {
      "I'm a cookie"
    }
  };

  List<QueryParameter> queryParams = new List<QueryParameter>();

  protected override async Task OnInitializedAsync() {
    await Task.Delay(1000);
    queryParams.Add(new QueryParameter() {
      Field = "DocTitle",
      Operator = "Contains",
      Values = new List<object>() {
        "I'm a cookie"
      }
    });
    queryParams.Add(new QueryParameter() {
      Field = "DocStatus",
      Operator = "In List",
      Values = new List<object>() {
        "RPT",
        "MEM",
        "COM",
        "Log"
      }
    });
    queryParams.Add(new QueryParameter() {
      Field = "DocTitle",
      Operator = "Does Not Contain",
      Values = new List<object>() {
        "There was a err"
      }
    });
  }

  void ToggleDragEnabled(MouseEventArgs e) {
    dragEnabled = !dragEnabled;
  }

  void ToggleAndOr(MouseEventArgs e, QueryParameter curParm) {
    curParm.AndWithNext = !curParm.AndWithNext;
  }
}
