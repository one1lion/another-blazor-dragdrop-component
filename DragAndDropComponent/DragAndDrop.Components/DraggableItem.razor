@inherits DragAndDropElementBase
@typeparam TItem
@using System.Globalization

<div draggable="@(model is null ? "false" : model.DragEnabled.ToString().ToLower(CultureInfo.CurrentCulture))">
  @if (model is null) {
    if (LoadingTemplate is null) {
      <p>Loading...</p>
    } else {
      @LoadingTemplate
    }
  } else if (model.Item is null) {
    if (NullItemTemplate is null) {
      <div>&nbsp;</div>
    } else {
      @NullItemTemplate(default(TItem))
    }
  } else {
    @ItemTemplate(model.Item)
  }
</div>

@code {
  DraggableItemViewModel<TItem> model;

  [Parameter] public TItem Item { get; set; }
  [Parameter] public bool DragEnabled { get; set; } = true;
  [Parameter] public List<string> AllowedTargetNames { get; set; }

  [Parameter] public RenderFragment LoadingTemplate { get; set; }
  [Parameter] public RenderFragment<TItem> NullItemTemplate { get; set; }
  [Parameter] public RenderFragment<TItem> ItemTemplate { get; set; }

  protected override void OnParametersSet() {
    if (model is null) { model = new DraggableItemViewModel<TItem>(); }
    // TODO: Validation: We can throw errors or show messages when some required field is not present, such as AllowedTargetNames
    model.Item = this.Item;
    model.Name = this.Name;
    model.DragEnabled = this.DragEnabled;
    model.AllowedTargetNames = this.AllowedTargetNames;
  }
}
