<?xml version="1.0"?>
<doc>
    <assembly>
        <name>DragAndDrop.Components</name>
    </assembly>
    <members>
        <member name="T:DragAndDrop.Components.DragAndDropContainerViewModel">
            <summary>
            An implementation of <see cref="T:DragAndDrop.Components.Interfaces.IDragAndDropContainer"/>
            that allows <see cref="T:DragAndDrop.Components.Interfaces.IDragAndDropElement"/>s to be
            added as child elements
            </summary>
        </member>
        <member name="M:DragAndDrop.Components.DragAndDropContainerViewModel.#ctor">
            <summary>The default constructor</summary>
        </member>
        <member name="P:DragAndDrop.Components.DragAndDropContainerViewModel.Id">
            <inheritdoc cref="P:DragAndDrop.Components.Interfaces.IDragAndDropElement.Id" />
        </member>
        <member name="P:DragAndDrop.Components.DragAndDropContainerViewModel.Name">
            <inheritdoc cref="P:DragAndDrop.Components.Interfaces.IDragAndDropElement.Name" />
        </member>
        <member name="P:DragAndDrop.Components.DragAndDropContainerViewModel.Parent">
            <inheritdoc cref="P:DragAndDrop.Components.Interfaces.IDragAndDropElement.Parent" />
        </member>
        <member name="P:DragAndDrop.Components.DragAndDropContainerViewModel.Children">
            <inheritdoc cref="P:DragAndDrop.Components.Interfaces.IDragAndDropContainer.Children" />
        </member>
        <member name="M:DragAndDrop.Components.DragAndDropContainerViewModel.Clone">
            <inheritdoc cref="M:DragAndDrop.Components.Interfaces.IDragAndDropElement.Clone``1"/>
        </member>
        <member name="M:DragAndDrop.Components.DragAndDropContainerViewModel.GroupWith(DragAndDrop.Components.Interfaces.IDragAndDropElement,System.Boolean)">
            <inheritdoc cref="M:DragAndDrop.Components.Interfaces.IDragAndDropElement.GroupWith``1(DragAndDrop.Components.Interfaces.IDragAndDropElement,System.Boolean)"/>
        </member>
        <member name="T:DragAndDrop.Components.DragAndDropItemViewModel`1">
            <summary>
            An implementation of <see cref="T:DragAndDrop.Components.Interfaces.IDragAndDropElement"/> that
            wraps content.  This element is not draggable.
            </summary>
            <typeparam name="T">The type of data contained within the element</typeparam>
        </member>
        <member name="M:DragAndDrop.Components.DragAndDropItemViewModel`1.#ctor">
            <summary>
            The default constructor
            </summary>
        </member>
        <member name="P:DragAndDrop.Components.DragAndDropItemViewModel`1.Id">
            <inheritdoc cref="P:DragAndDrop.Components.Interfaces.IDragAndDropElement.Id"/>
        </member>
        <member name="P:DragAndDrop.Components.DragAndDropItemViewModel`1.Name">
            <inheritdoc cref="P:DragAndDrop.Components.Interfaces.IDragAndDropElement.Name"/>
        </member>
        <member name="P:DragAndDrop.Components.DragAndDropItemViewModel`1.Parent">
            <inheritdoc cref="P:DragAndDrop.Components.Interfaces.IDragAndDropElement.Parent"/>
        </member>
        <member name="P:DragAndDrop.Components.DragAndDropItemViewModel`1.Item">
            <summary>
            The item being wrapped by this draggable element
            </summary>
        </member>
        <member name="M:DragAndDrop.Components.DragAndDropItemViewModel`1.Clone">
            <inheritdoc cref="M:DragAndDrop.Components.Interfaces.IDragAndDropElement.Clone``1"/>
        </member>
        <member name="T:DragAndDrop.Components.DraggableContainerViewModel">
            <summary>
            An implementation of <see cref="T:DragAndDrop.Components.Interfaces.IDraggableElement"/>
            and <see cref="T:DragAndDrop.Components.Interfaces.IDragAndDropContainer"/>
            that can be dragged onto/into other <see cref="T:DragAndDrop.Components.Interfaces.IDragAndDropContainer" />s,
            moving the entire group (with its children) into the 
            target <see cref="T:DragAndDrop.Components.Interfaces.IDragAndDropContainer" />
            </summary>
        </member>
        <member name="M:DragAndDrop.Components.DraggableContainerViewModel.#ctor">
            <summary>The default constructor</summary>
        </member>
        <member name="P:DragAndDrop.Components.DraggableContainerViewModel.DragEnabled">
            <inheritdoc cref="P:DragAndDrop.Components.Interfaces.IDraggableElement.DragEnabled" />
        </member>
        <member name="P:DragAndDrop.Components.DraggableContainerViewModel.AllowedTargetNames">
            <inheritdoc cref="P:DragAndDrop.Components.Interfaces.IDraggableElement.AllowedTargetNames" />
        </member>
        <member name="M:DragAndDrop.Components.DraggableContainerViewModel.Clone">
            <inheritdoc cref="M:DragAndDrop.Components.Interfaces.IDragAndDropElement.Clone``1"/>
        </member>
        <member name="T:DragAndDrop.Components.DraggableItemViewModel`1">
            <summary>
            An implementation of <see cref="T:DragAndDrop.Components.Interfaces.IDraggableElement"/>
            that can be dragged onto/into <see cref="T:DragAndDrop.Components.Interfaces.IDragAndDropContainer" />s
            </summary>
            <typeparam name="T">The type of data contained within the element</typeparam>
        </member>
        <member name="M:DragAndDrop.Components.DraggableItemViewModel`1.#ctor">
            <summary>The default constructor</summary>
        </member>
        <member name="P:DragAndDrop.Components.DraggableItemViewModel`1.AllowedTargetNames">
            <inheritdoc cref="P:DragAndDrop.Components.Interfaces.IDraggableElement.AllowedTargetNames" />
        </member>
        <member name="P:DragAndDrop.Components.DraggableItemViewModel`1.DragEnabled">
            <inheritdoc cref="P:DragAndDrop.Components.Interfaces.IDraggableElement.DragEnabled" />
        </member>
        <member name="M:DragAndDrop.Components.DraggableItemViewModel`1.Clone">
            <inheritdoc cref="M:DragAndDrop.Components.Interfaces.IDragAndDropElement.Clone``1"/>
        </member>
        <member name="T:DragAndDrop.Components.Interfaces.IDragAndDropContainer">
            <summary>
            Extends the basic <see cref="T:DragAndDrop.Components.Interfaces.IDragAndDropElement"/>
            by adding a <see cref="P:DragAndDrop.Components.Interfaces.IDragAndDropContainer.Children"/>
            property, enabling this element to contain child 
            <see cref="T:DragAndDrop.Components.Interfaces.IDragAndDropElement"/>s
            </summary>
        </member>
        <member name="P:DragAndDrop.Components.Interfaces.IDragAndDropContainer.Children">
            <summary>
            The <see cref="T:DragAndDrop.Components.Interfaces.IDragAndDropElement" />s 
            nested within this element
            </summary>
        </member>
        <member name="M:DragAndDrop.Components.Interfaces.IDragAndDropContainer.AddChild(DragAndDrop.Components.Interfaces.IDragAndDropElement,System.Nullable{System.Int32})">
            <summary>
            Add an element that does not already exist as a child of this 
            <see cref="T:DragAndDrop.Components.Interfaces.IDragAndDropContainer"/>
            </summary>
            <param name="element">
            <see cref="T:DragAndDrop.Components.Interfaces.IDragAndDropElement"/> to be added as a 
            child
            </param>
            <param name="targetIndex">
            The index position in the list of
            <see cref="P:DragAndDrop.Components.Interfaces.IDragAndDropContainer.Children"/> to
            add the <see cref="T:DragAndDrop.Components.Interfaces.IDragAndDropElement"/> at.  If
            this is not specified (default), it will be added at the end
            </param>
            <returns>Whether adding the child was successful</returns>
            <exception cref="T:System.ArgumentNullException">
            Throws an Argument Null Exception if the provided <paramref name="element"/> is null
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Throws an Argument Exception if the provided <paramref name="targetIndex"/> value is
            negative or greater than the count of 
            <see cref="P:DragAndDrop.Components.Interfaces.IDragAndDropContainer.Children"/>
            </exception>
            <exception cref="T:System.OperationCanceledException">
            Throws an Operation Canceled Exception if the <paramref name="element"/> already
            exists as a child
            </exception>
        </member>
        <member name="M:DragAndDrop.Components.Interfaces.IDragAndDropContainer.AppendChild(DragAndDrop.Components.Interfaces.IDragAndDropElement)">
            <summary>
            Append an element that does not already exist as a child of this 
            <see cref="T:DragAndDrop.Components.Interfaces.IDragAndDropContainer"/>
            to the end of the list of 
            <see cref="P:DragAndDrop.Components.Interfaces.IDragAndDropContainer.Children"/>
            </summary>
            <param name="element">
            <see cref="T:DragAndDrop.Components.Interfaces.IDragAndDropElement"/> to be added as a 
            child
            </param>
            <returns>Whether appending the child was successful</returns>
        </member>
        <member name="M:DragAndDrop.Components.Interfaces.IDragAndDropContainer.PrependChild(DragAndDrop.Components.Interfaces.IDragAndDropElement)">
            <summary>
            Prepend an element that does not already exist as a child of this 
            <see cref="T:DragAndDrop.Components.Interfaces.IDragAndDropContainer"/>
            to the beginning of the list of 
            <see cref="P:DragAndDrop.Components.Interfaces.IDragAndDropContainer.Children"/>
            </summary>
            <param name="element">
            <see cref="T:DragAndDrop.Components.Interfaces.IDragAndDropElement"/> to be added as a 
            child
            </param>
            <returns>Whether prepending the child was successful</returns>
        </member>
        <member name="M:DragAndDrop.Components.Interfaces.IDragAndDropContainer.MoveChild(DragAndDrop.Components.Interfaces.IDragAndDropElement,System.Nullable{System.Int32})">
            <summary>
            Move an existing element within the list of 
            <see cref="P:DragAndDrop.Components.Interfaces.IDragAndDropContainer.Children"/> 
            to a target index
            </summary>
            <param name="existingChild">
            An existing <see cref="T:DragAndDrop.Components.Interfaces.IDragAndDropElement"/> 
            in this container's list of 
            <see cref="P:DragAndDrop.Components.Interfaces.IDragAndDropContainer.Children"/> 
            </param>
            <param name="targetIndex">
            The index position in the list of
            <see cref="P:DragAndDrop.Components.Interfaces.IDragAndDropContainer.Children"/> to
            move the <see cref="T:DragAndDrop.Components.Interfaces.IDragAndDropElement"/> to.  If
            this is not specified (default), it will be moved to the end
            </param>
            <returns>Whether moving the child was successful</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Throws an Argument Exception if the provided <paramref name="targetIndex"/> value is
            negative or greater than the count of 
            <see cref="P:DragAndDrop.Components.Interfaces.IDragAndDropContainer.Children"/>
            </exception>
        </member>
        <member name="M:DragAndDrop.Components.Interfaces.IDragAndDropContainer.MoveChild(System.Int32,System.Nullable{System.Int32})">
            <summary>
            Move an existing element within the list of 
            <see cref="P:DragAndDrop.Components.Interfaces.IDragAndDropContainer.Children"/> 
            to a target index
            </summary>
            <param name="index">
            The index for an existing <see cref="T:DragAndDrop.Components.Interfaces.IDragAndDropElement"/> 
            in this container's list of 
            <see cref="P:DragAndDrop.Components.Interfaces.IDragAndDropContainer.Children"/> 
            </param>
            <param name="targetIndex">
            The index position in the list of
            <see cref="P:DragAndDrop.Components.Interfaces.IDragAndDropContainer.Children"/> to
            move the <see cref="T:DragAndDrop.Components.Interfaces.IDragAndDropElement"/> to.  If
            this is not specified (default), it will be moved to the end
            </param>
            <returns>Whether moving the child was successful</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Throws an Argument Exception if the provided <paramref name="targetIndex"/> value is
            negative or greater than the count of 
            <see cref="P:DragAndDrop.Components.Interfaces.IDragAndDropContainer.Children"/>
            </exception>
        </member>
        <member name="M:DragAndDrop.Components.Interfaces.IDragAndDropContainer.RemoveChild(DragAndDrop.Components.Interfaces.IDragAndDropElement)">
            <summary>
            Remove an existising child of this 
            <see cref="T:DragAndDrop.Components.Interfaces.IDragAndDropContainer"/>
            </summary>
            <param name="element">
            The <see cref="T:DragAndDrop.Components.Interfaces.IDragAndDropElement"/> to be removed
            </param>
            <returns>
            The removed child if the requested element exists in the list of children, otherwise null 
            </returns>
        </member>
        <member name="M:DragAndDrop.Components.Interfaces.IDragAndDropContainer.RemoveChild(System.Int32)">
            <summary>
            Remove an existising child of this 
            <see cref="T:DragAndDrop.Components.Interfaces.IDragAndDropContainer"/> at the
            specified index
            </summary>
            <param name="index">
            The index of the child <see cref="T:DragAndDrop.Components.Interfaces.IDragAndDropElement"/> to be removed
            </param>
            <returns>
            The removed child if the requested element exists in the list of children, otherwise null 
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Throws an Argument Exception if the provided <paramref name="index"/> value is
            negative or greater than or equal to the count of 
            <see cref="P:DragAndDrop.Components.Interfaces.IDragAndDropContainer.Children"/>
            </exception>
        </member>
        <member name="M:DragAndDrop.Components.Interfaces.IDragAndDropContainer.CopyChild(DragAndDrop.Components.Interfaces.IDragAndDropElement,DragAndDrop.Components.Interfaces.IDragAndDropContainer,System.Nullable{System.Int32})">
            <summary>
            Copies a child element to a target 
            <see cref="T:DragAndDrop.Components.Interfaces.IDragAndDropContainer"/>
            at the specified index
            </summary>
            <param name="existingChild">
            An existing <see cref="T:DragAndDrop.Components.Interfaces.IDragAndDropElement"/> 
            in this container's list of 
            <see cref="P:DragAndDrop.Components.Interfaces.IDragAndDropContainer.Children"/> 
            </param>
            <param name="toContainer">
            The <see cref="T:DragAndDrop.Components.Interfaces.IDragAndDropContainer"/> to add
            the copy of the <paramref name="existingChild"/> to
            </param>
            <param name="targetIndex">
            The index the copied element should appear in the <paramref name="toContainer"/>.
            If this is default, the copy will be added as the last element
            </param>
            <returns></returns>
        </member>
        <member name="M:DragAndDrop.Components.Interfaces.IDragAndDropContainer.CopyChild(System.Int32,DragAndDrop.Components.Interfaces.IDragAndDropContainer,System.Nullable{System.Int32})">
            <summary>
            Copies a child element by its index to a target 
            <see cref="T:DragAndDrop.Components.Interfaces.IDragAndDropContainer"/>
            at the specified index
            </summary>
            <param name="index">
            The index for an existing <see cref="T:DragAndDrop.Components.Interfaces.IDragAndDropElement"/> 
            in this container's list of 
            <see cref="P:DragAndDrop.Components.Interfaces.IDragAndDropContainer.Children"/> 
            </param>
            <param name="toContainer">
            The <see cref="T:DragAndDrop.Components.Interfaces.IDragAndDropContainer"/> to add
            the copy of the child located at the specified <paramref name="index"/>
            </param>
            <param name="targetIndex">
            The index the copied element should appear in the <paramref name="toContainer"/>.
            If this is default, the copy will be added as the last element
            </param>
            <returns></returns>
        </member>
        <member name="M:DragAndDrop.Components.Interfaces.IDragAndDropContainer.CopyChild(DragAndDrop.Components.Interfaces.IDragAndDropContainer,DragAndDrop.Components.Interfaces.IDragAndDropElement,DragAndDrop.Components.Interfaces.IDragAndDropContainer,System.Nullable{System.Int32})">
            <summary>
            Copies an existing <see cref="T:DragAndDrop.Components.Interfaces.IDragAndDropElement"/> child from 
            a specified <see cref="T:DragAndDrop.Components.Interfaces.IDragAndDropContainer"/>
            </summary>
            <param name="fromContainer">
            The <see cref="T:DragAndDrop.Components.Interfaces.IDragAndDropContainer"/> to copy 
            the child from
            </param>
            <param name="existingChild">
            An existing <see cref="T:DragAndDrop.Components.Interfaces.IDragAndDropElement"/> 
            in this container's list of 
            <see cref="P:DragAndDrop.Components.Interfaces.IDragAndDropContainer.Children"/> 
            </param>
            <param name="toContainer">
            The <see cref="T:DragAndDrop.Components.Interfaces.IDragAndDropContainer"/> to add
            the copy of the <paramref name="existingChild"/> to
            </param>
            <param name="targetIndex">
            The index the copied element should appear in the <paramref name="toContainer"/>.
            If this is default, the copy will be added as the last element
            </param>
            <returns></returns>
        </member>
        <member name="M:DragAndDrop.Components.Interfaces.IDragAndDropContainer.CopyChild(DragAndDrop.Components.Interfaces.IDragAndDropContainer,System.Int32,DragAndDrop.Components.Interfaces.IDragAndDropContainer,System.Nullable{System.Int32})">
            <summary>
            Copies an existing <see cref="T:DragAndDrop.Components.Interfaces.IDragAndDropElement"/> child from 
            a specified <see cref="T:DragAndDrop.Components.Interfaces.IDragAndDropContainer"/> at the specified 
            <paramref name="index"/>
            </summary>
            <param name="fromContainer">
            The <see cref="T:DragAndDrop.Components.Interfaces.IDragAndDropContainer"/> to copy 
            the child located at the specified <paramref name="index"/> from
            </param>
            <param name="index">
            The index for an existing <see cref="T:DragAndDrop.Components.Interfaces.IDragAndDropElement"/> 
            in this container's list of 
            <see cref="P:DragAndDrop.Components.Interfaces.IDragAndDropContainer.Children"/> 
            </param>
            <param name="toContainer">
            The <see cref="T:DragAndDrop.Components.Interfaces.IDragAndDropContainer"/> to add
            the copy of the child located at the specified <paramref name="index"/>
            </param>
            <param name="targetIndex">
            The index the copied element should appear in the <paramref name="toContainer"/>.
            If this is default, the copy will be added as the last element
            </param>
            <returns></returns>
        </member>
        <member name="T:DragAndDrop.Components.Interfaces.IDragAndDropElement">
            <summary>
            The basic element for a Drag And Drop Component of which all elements are derived
            </summary>
            <remarks>
            By default, Drag And Drop elements that implement this are static elements managed by
            this control.  To make an element draggable, it should implement
            <see cref="T:DragAndDrop.Components.Interfaces.IDraggableElement"/>
            </remarks>
        </member>
        <member name="P:DragAndDrop.Components.Interfaces.IDragAndDropElement.Id">
            <summary>A unique identifier for the element</summary>
        </member>
        <member name="P:DragAndDrop.Components.Interfaces.IDragAndDropElement.Name">
            <summary>The name for this element</summary>
        </member>
        <member name="P:DragAndDrop.Components.Interfaces.IDragAndDropElement.Parent">
            <summary>
            The <see cref="T:DragAndDrop.Components.Interfaces.IDragAndDropContainer" /> 
            that this element is nested in
            </summary>
        </member>
        <member name="P:DragAndDrop.Components.Interfaces.IDragAndDropElement.Siblings">
            <summary>
            The other elements nested in this 
            <see cref="P:DragAndDrop.Components.Interfaces.IDragAndDropElement.Parent"/>'s element
            </summary>
        </member>
        <member name="M:DragAndDrop.Components.Interfaces.IDragAndDropElement.Clone``1">
            <summary>
            Creates a deep copy of this element
            </summary>
            <typeparam name="TDragAndDropElement">
            The implemented type if <see cref="T:DragAndDrop.Components.Interfaces.IDragAndDropElement"/>
            </typeparam>
            <returns>A deep copy of this element.  This includes a copy of any reference elements</returns>
            <remarks>
            An implementation of IDragAndDropElement or derivation should include a Clone() method that
            does not have any parameters and is not Generic.  It should wrap this method specifying its
            own type as the generic type.  E.g.:
            <code>
            public DragAndDropContainerViewModel Clone() {
              return ((IDragAndDropElement)this).Clone&lt;DragAndDropContainerViewModel&gt;();
            }
            </code>
            </remarks>
        </member>
        <member name="M:DragAndDrop.Components.Interfaces.IDragAndDropElement.GroupWith``1(DragAndDrop.Components.Interfaces.IDragAndDropElement,System.Boolean)">
            <summary>
            Groups this element with the specified <see cref="T:DragAndDrop.Components.Interfaces.IDragAndDropElement"/>
            into a new <see cref="T:DragAndDrop.Components.Interfaces.IDragAndDropContainer"/>
            </summary>
            <typeparam name="TDragAndDropContainer">
            The implemented type if <see cref="T:DragAndDrop.Components.Interfaces.IDragAndDropContainer"/>
            </typeparam>
            <param name="element">
            The <see cref="T:DragAndDrop.Components.Interfaces.IDragAndDropElement"/> to group with
            </param>
            <param name="showFirst">Whether or not this item should appear first in the new group</param>
            <returns>The new <see cref="T:DragAndDrop.Components.Interfaces.IDragAndDropContainer"/></returns>
        </member>
        <member name="M:DragAndDrop.Components.Interfaces.IDragAndDropElement.GroupWith(DragAndDrop.Components.Interfaces.IDragAndDropElement,System.Boolean,System.Boolean)">
            <summary>
            A convenience method for returning either a 
            <see cref="T:DragAndDrop.Components.DragAndDropContainerViewModel" /> or a
            <see cref="T:DragAndDrop.Components.DraggableContainerViewModel" />
            </summary>
            <param name="element">
            The <see cref="T:DragAndDrop.Components.Interfaces.IDraggableElement"/>
            to group this element with
            </param>
            <param name="makeDraggable">
            If true, this will return a <see cref="T:DragAndDrop.Components.DraggableContainerViewModel" />, otherwise it will return
            a <see cref="T:DragAndDrop.Components.DragAndDropContainerViewModel" />
            </param>
            <param name="showFirst">Whether or not this item should appear first in the new group</param>
            <returns>
            If <paramref name="makeDraggable"/> is true, a <see cref="T:DragAndDrop.Components.DraggableContainerViewModel" />, 
            otherwise a <see cref="T:DragAndDrop.Components.DragAndDropContainerViewModel" />
            </returns>
        </member>
        <member name="M:DragAndDrop.Components.Interfaces.IDragAndDropElement.CopyTo(DragAndDrop.Components.Interfaces.IDragAndDropContainer,System.Nullable{System.Int32})">
            <summary>
            Copies this <see cref="T:DragAndDrop.Components.Interfaces.IDragAndDropElement"/> to a target 
            <see cref="T:DragAndDrop.Components.Interfaces.IDragAndDropContainer"/>
            at the specified index
            </summary>
            <param name="toContainer">
            The <see cref="T:DragAndDrop.Components.Interfaces.IDragAndDropContainer"/> to add
            a copy of this <see cref="T:DragAndDrop.Components.Interfaces.IDragAndDropElement"/>
            </param>
            <param name="targetIndex">
            The index the copied element should appear in the <paramref name="toContainer"/>.
            If this is default, the copy will be added as the last element
            </param>
            <returns></returns>
        </member>
        <member name="M:DragAndDrop.Components.Interfaces.IDragAndDropElement.CopyTo(DragAndDrop.Components.Interfaces.IDragAndDropElement,DragAndDrop.Components.Interfaces.IDragAndDropContainer,System.Nullable{System.Int32})">
            <summary>
            Copies an <see cref="T:DragAndDrop.Components.Interfaces.IDragAndDropElement"/> to a target 
            <see cref="T:DragAndDrop.Components.Interfaces.IDragAndDropContainer"/>
            at the specified index
            </summary>
            <param name="existingElement">
            An existing <see cref="T:DragAndDrop.Components.Interfaces.IDragAndDropElement"/> 
            in this container's list of 
            <see cref="P:DragAndDrop.Components.Interfaces.IDragAndDropContainer.Children"/> 
            </param>
            <param name="toContainer">
            The <see cref="T:DragAndDrop.Components.Interfaces.IDragAndDropContainer"/> to add
            the copy of the <paramref name="existingElement"/> to
            </param>
            <param name="targetIndex">
            The index the copied element should appear in the <paramref name="toContainer"/>.
            If this is default, the copy will be added as the last element
            </param>
            <returns></returns>
        </member>
        <member name="T:DragAndDrop.Components.Interfaces.IDragAndDropGroupable">
            <summary>
            A specification for a making an IDragAndDropElement groupable 
            </summary>
        </member>
        <member name="M:DragAndDrop.Components.Interfaces.IDragAndDropGroupable.GroupWith(DragAndDrop.Components.Interfaces.IDragAndDropGroupable,System.Boolean)">
            <summary>
            Groups this element with the specified <see cref="T:DragAndDrop.Components.Interfaces.IDragAndDropGroupable"/>
            into a new <see cref="T:DragAndDrop.Components.Interfaces.IDragAndDropContainer"/>
            </summary>
            <param name="element">
            The <see cref="T:DragAndDrop.Components.Interfaces.IDragAndDropGroupable"/> to group with
            </param>
            <param name="showFirst">Whether or not this item should appear first in the new group</param>
            <returns></returns>
        </member>
        <member name="T:DragAndDrop.Components.Interfaces.IDragAndDropSeparator">
            <summary>
            A specification for a making an IDragAndDropElement into a separator element, 
            such as drop target (Drop Before, Drop After), or simply an element to 
            place between Children in a container.
            </summary>
        </member>
        <member name="T:DragAndDrop.Components.Interfaces.IDraggableElement">
            <summary>
            An <see cref="T:DragAndDrop.Components.Interfaces.IDragAndDropElement"/> that is
            specified to be draggable
            </summary>
            <remarks>
            An element that only implements this interface cannot contain children by default.
            To allow children, also implement the 
            <see cref="T:DragAndDrop.Components.Interfaces.IDragAndDropContainer"/> interface.
            </remarks>
        </member>
        <member name="P:DragAndDrop.Components.Interfaces.IDraggableElement.DragEnabled">
            <summary>
            A flag indicating whether or not this element should 
            be allowed to be dragged currently
            </summary>
        </member>
        <member name="P:DragAndDrop.Components.Interfaces.IDraggableElement.AllowedTargetNames">
            <summary>
            A list of target 
            <see cref="P:DragAndDrop.Components.Interfaces.IDragAndDropElement.Name" />s
            the item can be dropped into/onto
            </summary>
        </member>
        <member name="M:DragAndDrop.Components.Interfaces.IDraggableElement.CanDrop(DragAndDrop.Components.Interfaces.IDragAndDropContainer)">
            <summary>
            Indicates whether the current element can be dropped into or onto a specified target name
            </summary>
            <param name="container"> 
            The <see cref="P:DragAndDrop.Components.Interfaces.IDragAndDropElement.Name" /> to test
            whether this element can be dropped into/onto
            </param>
            <returns>Whether or not this element can be dropped into/onto the specified target name</returns>
        </member>
        <member name="M:DragAndDrop.Components.Interfaces.IDraggableElement.AddTo(DragAndDrop.Components.Interfaces.IDragAndDropContainer,System.Nullable{System.Int32})">
            <summary>
            Add this element to the target 
            <see cref="T:DragAndDrop.Components.Interfaces.IDragAndDropContainer"/>
            </summary>
            <param name="targetContainer">
            The <see cref="T:DragAndDrop.Components.Interfaces.IDragAndDropContainer"/> to
            add this element to
            </param>
            <param name="targetIndex">
            The index (position) within the list of the <paramref name="targetContainer"/> 
            this item should be added at.  If this is the default value for nullable int,
            it will be added to the end
            </param>
            <returns>Whether or not the add was successful</returns>
        </member>
        <member name="M:DragAndDrop.Components.Interfaces.IDraggableElement.CopyTo(DragAndDrop.Components.Interfaces.IDragAndDropContainer,System.Nullable{System.Int32})">
            <summary>
            Copy this element to the target 
            <see cref="T:DragAndDrop.Components.Interfaces.IDragAndDropContainer"/>
            </summary>
            <param name="targetContainer">
            The <see cref="T:DragAndDrop.Components.Interfaces.IDragAndDropContainer"/> to
            copy this element to
            </param>
            <param name="targetIndex">
            The index (position) within the list of the <paramref name="targetContainer"/> 
            the copy of this item should be added at.  If this is the default value for nullable 
            int, it will be added to the end
            </param>
            <returns>Whether or not the add was successful</returns>
        </member>
        <member name="M:DragAndDrop.Components.Interfaces.IDraggableElement.RemoveFrom(DragAndDrop.Components.Interfaces.IDragAndDropContainer)">
            <summary>
            Remove this element from the target
            <see cref="T:DragAndDrop.Components.Interfaces.IDragAndDropContainer"/>
            </summary>
            <param name="targetContainer">
            The <see cref="T:DragAndDrop.Components.Interfaces.IDragAndDropContainer"/> to
            remove this element from
            </param>
            <returns>Whether or not the remove was successful</returns>
        </member>
        <member name="M:DragAndDrop.Components.Interfaces.IDraggableElement.Move(DragAndDrop.Components.Interfaces.IDragAndDropContainer,System.Nullable{System.Int32})">
            <summary>
            Move this element to or within the target 
            <see cref="T:DragAndDrop.Components.Interfaces.IDragAndDropContainer"/>
            </summary>
            <param name="targetContainer">
            The <see cref="T:DragAndDrop.Components.Interfaces.IDragAndDropContainer"/> to
            move this element to or within
            </param>
            <param name="targetIndex">
            The index (position) within the list of the <paramref name="targetContainer"/> 
            this item should be added at.  If this is the default value for nullable int,
            it will be added to the end
            </param>
        </member>
    </members>
</doc>
