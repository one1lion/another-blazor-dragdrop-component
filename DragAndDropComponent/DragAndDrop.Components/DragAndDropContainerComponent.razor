@typeparam TItem
@using System.Reflection

<div class="draganddrop-container">
  <CascadingValue Value="this">
    @if (!string.IsNullOrWhiteSpace(GroupNameProperty) && gnProp is { }) {
      foreach (var curGroup in DraggableItems.GroupBy((Func<DraggableItem<TItem>, string>)(g => (string)g.Name)).OrderBy(g => g.Key)) {
        <DragAndDropGroup Name="@curGroup.Key" Style="DefaultGroupStyle" DraggableItems="DraggableItems" TItem="TItem" />
      }
    } else {
      @ChildContent
    }
  </CascadingValue>
</div>

@code {
  /// <summary>The list of child <see cref="TItem"/>s</summary>
  [Parameter] public List<TItem> Items { get; set; }
  /// <summary>
  /// The property of <see cref="TItem" /> to be used as the
  /// <see cref="DragAndDrop.Components.DragAndDropGroup{TItem}.Name"/>
  /// </summary>
  [Parameter] public string GroupNameProperty { get; set; }
  [Parameter] public string OrderProperty { get; set; }
  [Parameter] public DragAndDropStyle DefaultGroupStyle { get; set; } = DragAndDropStyle.NotSet;
  [Parameter] public RenderFragment ChildContent { get; set; }

  public List<DraggableItem<TItem>> DraggableItems { get; set; } = new List<DraggableItem<TItem>>();

  Type t;
  PropertyInfo gnProp;
  PropertyInfo orderProp;

  protected override void OnParametersSet() {
    if (Items == null) {
      DraggableItems = new List<DraggableItem<TItem>>();
      return;
    }

    t = typeof(TItem);
    gnProp = string.IsNullOrWhiteSpace(GroupNameProperty) ? null : t.GetProperty(GroupNameProperty);
    orderProp = string.IsNullOrWhiteSpace(OrderProperty) ? null : t.GetProperty(OrderProperty);

    var i = 0;
    DraggableItems = Items.Select(curItem => new DraggableItem<TItem>() {
      Name = gnProp is { } ? (string)gnProp.GetValue(curItem) : "",
      Item = curItem
    }).ToList();
  }
}
