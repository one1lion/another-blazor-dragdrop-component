@typeparam TListItem
@typeparam TItem
@typeparam TGroup
@inherits DnDContainerBase<TListItem, TItem, TGroup>
@using System.Linq

<div class="dragondrop" ondragover="event.preventDefault();" ondragenter="event.preventDefault();" ondragleave="event.preventDefault();">
  @if (ShowDebugInfo && BaseContainer == this) {
    Console.Write("Rendering debug info for picked up item: ");
    <p class="dragondrop-info">
      @if (!string.IsNullOrEmpty(payload.address)) {
        Console.WriteLine($"Item is picked up ({payload.address})");
        <text>Picked up: @payload.address</text>
      } else {
        Console.WriteLine("No item is picked up");
        <text>Nothing is picked up</text>
      }
    </p>
  }
  @if (!string.IsNullOrWhiteSpace(Title) && ShowTitle) {
    if (ShowDebugInfo) {
      Console.Write("Rendering the title ");
    }
    <p class="dragondrop-title">
      @if (ShowDebugInfo) {
        Console.Write($"and the address ({Address}) ");
        <span>
          (@Address)<br />
          DropCssStyles Array Length: @(dropCssStyles?.Length)<br />
          ShowGroupWith Array Length: @(showGroupWith?.Length)<br />
          ShowNewItem Array Length: @(showNewItem?.Length)
        </span>
      }
      @Title
    </p>
    if (ShowDebugInfo) {
      Console.WriteLine("of the current container");
    }
  }

  @if (!ShowTitle && ShowDebugInfo) {
    Console.WriteLine($"Displaying the address of the current container: {Address}");
    <p>(@Address)</p>
  }

  @{
    if (ShowDebugInfo) { Console.WriteLine($"Determining dropStyleCss in {Address}"); }
    dropStyleCss = BaseContainer is null || string.IsNullOrWhiteSpace(BaseContainer.GetPayload().address)
                     ? ""
                     : Address.StartsWith(BaseContainer.GetPayload().address)
                       ? DropStyleCss.NoDrop
                       : DropStyleCss.CanDrop;
  }
  @if (BaseContainer == this && ShowNewItem) {
    if (ShowDebugInfo) { Console.WriteLine("Rendering the new item component"); }
    <DnDItem TListItem="TListItem"
                    TItem="TItem"
                    TGroup="TGroup"
                    Item="NewItem"
                    ShowDebugInfo="ShowDebugInfo"
                    OnDragStart="@((e) => HandleDragStart(e, List.Count(), this, "0"))"
                    OnDragEnd="HandleDragEnd"
                    OnDrop="@((e) => HandleMove(e, List.Count(), true))"
                    Parent="this"
                    ItemTemplate="ItemTemplate"
                    EditItemTemplate="EditItemTemplate"
                    EditMode="true"
                    IsAdd="true"
                    SeparatorDisplay="SeparatorDisplay.None"
                    Address="@($"{Address}.{List.Count()}")"
                    HideEditControlButtons="true" />
    <button type="button" @onclick="@((e) => AddItem(e, List.Count()))">Add</button>
  }

  @if (ShowDebugInfo) { Console.WriteLine($"Rendering the container frame for {Address}"); }

  @{
    var curPayloadAddress = BaseContainer?.GetPayload().address;
  }
  <ul class="dragondrop-container @dropStyleCss"
      ondragover="event.preventDefault();">
    @if (List is null || List.Count() == 0) {
      if (ShowDebugInfo) { Console.WriteLine($"Rendering the empty list element for {Address}"); }
      <li class="dragondrop-item dragondrop-empty-list"
          @ondrop="@((e) => HandleMove(e, 0))"
          @ondrop:stopPropagation="true">No items added</li>
    } else {
      if (ShowDebugInfo) { Console.WriteLine($"Beginning the loop over the children while rendering the component at {Address}"); }

      var i = 0;
      if (ShowDebugInfo && !string.IsNullOrWhiteSpace(curPayloadAddress)) { Console.WriteLine($"Storing payload address into a variable ({curPayloadAddress})"); }
      for (var j = 0; j < List.Count(); j++) {
        if (ShowDebugInfo) {
          Console.WriteLine($"Getting a reference to the current jth child (item index {j}) of {Address}");
        }
        var curItem = List[j];
        if (ShowDebugInfo) { Console.WriteLine($"Preparing the variables to determine if the current item is a Group or an Item (in Container {Address})"); }
        var childProp = string.IsNullOrWhiteSpace(ChildrenPropertyName) ? null : curItem.GetType().GetProperty(ChildrenPropertyName);
        var childrens = (List<TListItem>)childProp?.GetValue(curItem);
        if (childProp != null) {
          if (ShowDebugInfo) { Console.WriteLine($"The current item has a Children property, checking to see if it is empty or has only one item (in container {Address})"); }

          if (childrens is null || childrens.Count() == 0) {
            if (ShowDebugInfo) { Console.WriteLine($"The current item is a group that is empty, so removing it from the list (in container {Address})"); }
            List.RemoveAt(j);
            j--;
            if (ShowDebugInfo) { Console.WriteLine($"Moving to the next item in the list (in container {Address})"); }
            continue;
          } else if (childrens.Count() == 1) {
            if (ShowDebugInfo) { Console.WriteLine($"The current item is a group that only has one child, so replacing the group with just the one item (in container {Address})"); }
            curItem = childrens[0];
            List.RemoveAt(j);
            List.Insert(j, curItem);
          } else if (ShowDebugInfo) {
            Console.WriteLine($"The current item is a group that has more than one element, not doing anything special with it (in container {Address})");
          }
        }
        var curItemIndex = i++;
        var curItemAddress = $"{Address}.{curItemIndex}";
        if (ShowDebugInfo) { Console.WriteLine($"Checking if the before separator should be rendered (in container {Address})"); }
        if (new[] { SeparatorDisplay.BeforeAndAfter, SeparatorDisplay.BeforeOnly }.Contains(SeparatorDisplay) && !(SeparatorItemTemplate is null)) {
          if (ShowDebugInfo) { Console.WriteLine($"Rendering the before separator (in container {Address})"); }
          <li class="dragondrop-separator dragondrop-separator-before">
            @SeparatorItemTemplate(curItem)
          </li>
        }

        if (curItemIndex == 0) {
          if (ShowDebugInfo) { Console.WriteLine($"Rendering the drop before drop target (in container {Address})"); }
          <li class="dragondrop-dropbefore
                 @(string.IsNullOrWhiteSpace(curPayloadAddress) || (curItemAddress.StartsWith(curPayloadAddress) && curPayloadAddress != curItemAddress) ? "opac-0" : "")
                 @(isDropBefore ? $"{dropCssStyles[curItemIndex]}" : "")"
              @ondragenter="@((e) => HandleDropTargetDragEnter(e, curItemIndex, true))"
              @ondragleave="@((e) => HandleDropTargetDragLeave(e, curItemIndex))"
              @ondragenter:stopPropagation="true"
              @ondragleave:stopPropagation="true"
              @ondragenter:preventDefault="true"
              @ondragleave:preventDefault="true"
              @ondrop="@((e) => HandleMove(e, curItemIndex))"
              @ondrop:stopPropagation="true"
              @onclick="@((e) => ToggleShowNewItem(e, curItemIndex, true))">
            &nbsp;
          </li>
        }
        if (ShowDebugInfo) { Console.WriteLine($"Checking if the Add Item LI should be rendered before the current item (in container {Address})"); }
        if (isAddBefore && showNewItem[curItemIndex]) {
          if (ShowDebugInfo) { Console.WriteLine($"Rendering the Add Item LI before the current item (in container {Address})"); }
          <li>
            <DnDItem TListItem="TListItem"
                            TItem="TItem"
                            TGroup="TGroup"
                            Item="NewItem"
                            ShowDebugInfo="ShowDebugInfo"
                            OnDragStart="@((e) => HandleDragStart(e, curItemIndex, this, Address))"
                            OnDragEnd="HandleDragEnd"
                            OnDrop="@((e) => HandleMove(e, curItemIndex, true))"
                            OnStatusUpdated="OnStatusUpdated"
                            OnSave="OnSaveComplete"
                            OnCancel="OnCancelComplete"
                            Parent="this"
                            ItemTemplate="ItemTemplate"
                            EditItemTemplate="EditItemTemplate"
                            EditMode="true"
                            IsAdd="true"
                            SeparatorDisplay="SeparatorDisplay.None"
                            Address="@curItemAddress"
                            HideEditControlButtons="false" />
          </li>
          if (new[] { SeparatorDisplay.BeforeAndAfter, SeparatorDisplay.AfterOnly }.Contains(SeparatorDisplay) && !(SeparatorItemTemplate is null)) {
            if (ShowDebugInfo) { Console.WriteLine($"Rendering the separator after for {curItemAddress} (in container {Address})"); }
            <li class="dragondrop-separator dragondrop-separator-after">
              @SeparatorItemTemplate((TListItem)(object)NewItem)
            </li>
          }
          if (ShowDebugInfo) { Console.WriteLine($"Determining whether to show the separator between for new item before {curItemAddress} (in container {Address})"); }
          if (SeparatorDisplay == SeparatorDisplay.Between && !(SeparatorItemTemplate is null)) {
            if (ShowDebugInfo) { Console.WriteLine($"Rendering the separator between for {curItemAddress} (in container {Address})"); }
            <li class="dragondrop-separator dragondrop-separator-between">
              @SeparatorItemTemplate((TListItem)(object)NewItem)
            </li>
          }
        }
        @if (AllowDropToGroup && !(string.IsNullOrWhiteSpace(curPayloadAddress) || curItemAddress.StartsWith(curPayloadAddress)) && showGroupWith[curItemIndex]) {
          if (ShowDebugInfo) { Console.WriteLine($"Rendering drop to gorup for {curItemAddress} (in container {Address})"); }
          <li><p>I am a drop to group</p></li>
        }
        if (ShowDebugInfo) { Console.WriteLine($"Determining if {curItemAddress} is a group or an item (in container {Address})"); }
        if (childProp is null) {
          if (ShowDebugInfo) { Console.WriteLine($"Rendering {curItemAddress} as an item (in container {Address})"); }
          <DnDItem TListItem="TListItem"
                          TItem="TItem"
                          TGroup="TGroup"
                          Item="(TItem)(object)curItem"
                          ShowDebugInfo="ShowDebugInfo"
                          OnDragStart="@((e) => HandleDragStart(e, curItemIndex, this, curItemAddress))"
                          OnDragEnd="HandleDragEnd"
                          OnDrop="@((e) => HandleMove(e, curItemIndex, true))"
                          OnStatusUpdated="OnStatusUpdated"
                          Parent="this"
                          ItemTemplate="ItemTemplate"
                          EditItemTemplate="EditItemTemplate"
                          SeparatorDisplay="SeparatorDisplay.None"
                          Address="@curItemAddress" />
        } else {
          if (ShowDebugInfo) { Console.WriteLine($"Rendering {curItemAddress} as a group{(curPayloadAddress == curItemAddress ? " that is picked up" : "")} (in container {Address})"); }
          <li class="dragondrop-container @(curPayloadAddress == curItemAddress ? "dragondrop-picked-up" : "")"
              draggable="true"
              @ondragstart="@((e) => HandleDragStart(e, curItemIndex, this, curItemAddress, true))"
              @ondragstart:stopPropagation="true"
              @ondragend="HandleDragEnd"
              @ondragend:stopPropagation="true"
              @ondrop="@((e) => HandleMove(e, curItemIndex, true))"
              @ondrop:stopPropagation="true">
            <DnDContainer List="childrens"
                                 TListItem="TListItem"
                                 TItem="TItem"
                                 TGroup="TGroup"
                                 ShowDebugInfo="ShowDebugInfo"
                                 Title="@Title"
                                 ShowTitle="ShowTitle"
                                 ChildrenPropertyName="@ChildrenPropertyName"
                                 Parent="this"
                                 BaseContainer="BaseContainer"
                                 ItemTemplate="ItemTemplate"
                                 EditItemTemplate="EditItemTemplate"
                                 SeparatorItemTemplate="SeparatorItemTemplate"
                                 SeparatorDisplay="SeparatorDisplay"
                                 Address="@curItemAddress"
                                 AllowDropToGroup="AllowDropToGroup" />
          </li>
        }

        if (ShowDebugInfo) { Console.WriteLine($"Determining whether to show the separator after for {curItemAddress} (in container {Address})"); }
        if (new[] { SeparatorDisplay.BeforeAndAfter, SeparatorDisplay.AfterOnly }.Contains(SeparatorDisplay) && !(SeparatorItemTemplate is null)) {
          if (ShowDebugInfo) { Console.WriteLine($"Rendering the separator after for {curItemAddress} (in container {Address})"); }
          <li class="dragondrop-separator dragondrop-separator-after">
            @SeparatorItemTemplate(curItem)
          </li>
        }
        if (ShowDebugInfo) { Console.WriteLine($"Determining whether to show the separator between for {curItemAddress} (in container {Address})"); }
        if (SeparatorDisplay == SeparatorDisplay.Between && !(SeparatorItemTemplate is null) && (curItemIndex < List.Count() - 1 || (!isAddBefore && showNewItem[curItemIndex]))) {
          if (ShowDebugInfo) { Console.WriteLine($"Rendering the separator between for {curItemAddress} (in container {Address})"); }
          <li class="dragondrop-separator dragondrop-separator-between">
            @SeparatorItemTemplate(curItem)
          </li>
        }

        if (ShowDebugInfo) {
          Console.WriteLine($"Rendering the drop after for {curItemAddress} (in container {Address})");
          if (dropCssStyles.Length <= curItemIndex) {
            Console.Error.WriteLine($"The current index {curItemIndex} is out of bounds for the dropCssStyles (length: {dropCssStyles.Length})");
          }
        }
        <li class="dragondrop-dropafter
                   @(string.IsNullOrWhiteSpace(curPayloadAddress) || (curItemAddress.StartsWith(curPayloadAddress) && curPayloadAddress != curItemAddress) ? "opac-0" : "")
                   @(!isDropBefore ? $"{dropCssStyles[curItemIndex]}" : "")"
            @ondragenter="@((e) => HandleDropTargetDragEnter(e, curItemIndex))"
            @ondragleave="@((e) => HandleDropTargetDragLeave(e, curItemIndex))"
            @ondragenter:stopPropagation="true"
            @ondragleave:stopPropagation="true"
            @ondragenter:preventDefault="true"
            @ondragleave:preventDefault="true"
            @ondrop="@((e) => HandleMove(e, curItemIndex + 1))"
            @ondrop:stopPropagation="true"
            @onclick="@((e) => ToggleShowNewItem(e, curItemIndex))">
          &nbsp;
        </li>
        if (ShowDebugInfo) { Console.WriteLine($"Checking if the Add Item LI should be rendered after the current item (in container {Address})"); }
        if (!isAddBefore && showNewItem[curItemIndex]) {
          if (ShowDebugInfo) { Console.WriteLine($"Rendering the Add Item LI before the current item (in container {Address})"); }
          <li>
            <DnDItem TListItem="TListItem"
                            TItem="TItem"
                            TGroup="TGroup"
                            Item="NewItem"
                            DragEnabled="false"
                            ShowDebugInfo="ShowDebugInfo"
                            OnDragStart="@((e) => HandleDragStart(e, curItemIndex + 1, this, Address))"
                            OnDragEnd="HandleDragEnd"
                            OnDrop="@((e) => HandleMove(e, curItemIndex + 1, true))"
                            OnStatusUpdated="OnStatusUpdated"
                            OnSave="OnSaveComplete"
                            OnCancel="OnCancelComplete"
                            Parent="this"
                            ItemTemplate="ItemTemplate"
                            EditItemTemplate="EditItemTemplate"
                            EditMode="true"
                            IsAdd="true"
                            SeparatorDisplay="SeparatorDisplay.None"
                            Address="@($"{Address}.{curItemIndex + 1}")"
                            HideEditControlButtons="false" />
          </li>
          if (new[] { SeparatorDisplay.BeforeAndAfter, SeparatorDisplay.AfterOnly }.Contains(SeparatorDisplay) && !(SeparatorItemTemplate is null)) {
            if (ShowDebugInfo) { Console.WriteLine($"Rendering the separator after for {curItemAddress} (in container {Address})"); }
            <li class="dragondrop-separator dragondrop-separator-after">
              @SeparatorItemTemplate((TListItem)(object)NewItem)
            </li>
          }
          if (ShowDebugInfo) { Console.WriteLine($"Determining whether to show the separator between for new item before {curItemAddress} (in container {Address})"); }
          if (SeparatorDisplay == SeparatorDisplay.Between && !(SeparatorItemTemplate is null) && curItemIndex < List.Count() - 1) {
            if (ShowDebugInfo) { Console.WriteLine($"Rendering the separator between for {curItemAddress} (in container {Address})"); }
            <li class="dragondrop-separator dragondrop-separator-between">
              @SeparatorItemTemplate((TListItem)(object)NewItem)
            </li>
          }
        }

        if (ShowDebugInfo) { Console.WriteLine($"Completed item {curItemAddress} (in container {Address})"); }
      }
      if (ShowDebugInfo) { Console.WriteLine($"Completed looping through children for container {Address}"); }
    }
    @if (ShowDebugInfo) { Console.WriteLine($"Determining whether to show the Add New Item after the last element in the container {Address}"); }
  </ul>
</div>

@if (ShowDebugInfo) { Console.WriteLine($"Completed container {Address}"); }
@code {
  bool arraySet = false;
  protected override void OnInitialized() {
    if (ShowDebugInfo) { Console.WriteLine($"OnInitialized for {Address}"); }
    NewItem = Activator.CreateInstance<TItem>();
  }

  protected override void OnParametersSet() {
    if (ShowDebugInfo) { Console.WriteLine($"OnParametersSet for {Address}"); }
    if (BaseContainer is null) { BaseContainer = this; }
    if (Parent is null || string.IsNullOrWhiteSpace(Address)) { Address = "0"; }
    if (!(List is null)) {
      if (!arraySet) {
        if (ShowDebugInfo) { Console.WriteLine($"List count is: {List.Count()}"); }
        dropCssStyles = new string[List.Count()];
        if (ShowDebugInfo) { Console.WriteLine($"dropCssStyles length is: {dropCssStyles.Length}"); }
        showGroupWith = new bool[List.Count()];
        if (ShowDebugInfo) { Console.WriteLine($"showGroupWith length is: {showGroupWith.Length}"); }
        showNewItem = new bool[List.Count()];
        if (ShowDebugInfo) { Console.WriteLine($"showNewItem length is: {showNewItem.Length}"); }
        arraySet = true;
      } else {
        UpdateArrayLengths();
      }
    }
  }
}
